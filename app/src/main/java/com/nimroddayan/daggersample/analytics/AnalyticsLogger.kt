/*
 * Copyright 2020 Nimrod Dayan nimroddayan.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.nimroddayan.daggersample.analytics

import com.nimroddayan.daggersample.feature.FeatureActivityModule
import com.nimroddayan.daggersample.intro.IntroModule

import javax.inject.Inject

/**
 * This class provides an example on how to use multi-scoping.
 * The class has its own scope which is then applied to different components that want
 * to use it such as in [FeatureActivityModule.contributeFeatureActivityInjector]
 * where the method is annotated with two scopes [org.codepond.daggersample.ActivityScope]
 * and [AnalyticsScope], and as in [IntroModule.contributeTutorialFragment] that is annotated with
 * both [org.codepond.daggersample.FragmentScope] and [AnalyticsScope].
 *
 *
 * By doing so, we make sure that each component get only own instance of [AnalyticsLogger] no matter how
 * many times it is injected in that component. For example, [AnalyticsLogger] is injected in both
 * [org.codepond.daggersample.feature.FeaturePresenter] and [org.codepond.daggersample.feature.FeatureActivity]
 * and both of these classes will get the same instance of [AnalyticsLogger] because they're both under the same
 * Dagger sub-component that is generated by [dagger.android.ContributesAndroidInjector] annotation.
 */
@AnalyticsScope
class AnalyticsLogger

// Notice that even though we don't actually inject anything in this constructor,
// we use @Inject annotation to make Dagger generate a provider for this class
// so that we don't actually need to create a module and write a @Provide method.
// This is a very common mistake beginners do with Dagger. This is possible since
// this class doesn't implement any interface which we're injecting somewhere.
@Inject
constructor() {
    fun logEvent(event: String) {
    }
}
